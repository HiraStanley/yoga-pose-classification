# -*- coding: utf-8 -*-
"""Yoga_WebApp_HiraStanley

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rCWbHT6HO1Aj8WIaIXX4q6czk2vvew6K
"""

# === Imports ===

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image
import time
import os
from tensorflow.keras.applications.efficientnet import preprocess_input

class_names = ['adho mukha svanasana', 'adho mukha vriksasana', 'agnistambhasana',
               'ananda balasana', 'anantasana', 'anjaneyasana', 'ardha bhekasana',
               'ardha chandrasana', 'ardha matsyendrasana', 'ardha pincha mayurasana',
               'ardha uttanasana', 'ashtanga namaskara', 'astavakrasana', 'baddha konasana',
               'bakasana', 'balasana', 'bhairavasana', 'bharadvajasana i', 'bhekasana',
               'bhujangasana', 'bhujapidasana', 'bitilasana', 'camatkarasana', 'chakravakasana',
               'chaturanga dandasana', 'dandasana', 'dhanurasana', 'durvasasana', 'dwi pada viparita dandasana',
               'eka pada koundinyanasana i', 'eka pada koundinyanasana ii', 'eka pada rajakapotasana',
               'eka pada rajakapotasana ii', 'ganda bherundasana', 'garbha pindasana', 'garudasana',
               'gomukhasana', 'halasana', 'hanumanasana', 'janu sirsasana', 'kapotasana', 'krounchasana', 'kurmasana', 'lolasana',
               'makara adho mukha svanasana', 'makarasana', 'malasana', 'marichyasana i', 'marichyasana iii',
               'marjaryasana', 'matsyasana', 'mayurasana', 'natarajasana', 'padangusthasana', 'padmasana', 'parighasana',
               'paripurna navasana', 'parivrtta janu sirsasana', 'parivrtta parsvakonasana', 'parivrtta trikonasana',
               'parsva bakasana', 'parsvottanasana', 'pasasana', 'paschimottanasana', 'phalakasana', 'pincha mayurasana',
               'prasarita padottanasana', 'purvottanasana', 'salabhasana', 'salamba bhujangasana', 'salamba sarvangasana',
               'salamba sirsasana', 'savasana', 'setu bandha sarvangasana', 'simhasana', 'sukhasana', 'supta baddha konasana',
               'supta matsyendrasana', 'supta padangusthasana', 'supta virasana', 'tadasana', 'tittibhasana', 'tolasana', 'tulasana',
               'upavistha konasana', 'urdhva dhanurasana', 'urdhva hastasana', 'urdhva mukha svanasana', 'urdhva prasarita eka padasana',
               'ustrasana', 'utkatasana', 'uttana shishosana', 'uttanasana', 'utthita ashwa sanchalanasana', 'utthita hasta padangustasana',
               'utthita parsvakonasana', 'utthita trikonasana', 'vajrasana', 'vasisthasana', 'viparita karani', 'virabhadrasana i', 'virabhadrasana ii',
               'virabhadrasana iii', 'virasana', 'vriksasana', 'vrischikasana', 'yoganidrasana']

# === Load TFLite Models ===
def load_model(model_path):
    interpreter = tf.lite.Interpreter(model_path=model_path)
    interpreter.allocate_tensors()
    return interpreter

# === Image Preprocessing ===
def preprocess_image(image, model_type):
    if 'CNN' in model_type:
        image = image.resize((128, 128))
        img = np.array(image).astype('float32') / 255.0
    else:  # Transfer model
        image = image.resize((224, 224))
        img = np.array(image).astype('float32')
        img = preprocess_input(img)
    img = np.expand_dims(img, axis=0)
    return img

# === Make Prediction ===
def predict(interpreter, img):
    input_details = interpreter.get_input_details()
    output_details = interpreter.get_output_details()
    interpreter.set_tensor(input_details[0]['index'], img)
    interpreter.invoke()
    prediction = interpreter.get_tensor(output_details[0]['index'])
    return prediction

# === Streamlit Interface ===
st.title("Hira's Yoga Pose Classifier")
st.write('Upload an image and select a model to predict the yoga pose.')

uploaded_file = st.file_uploader('Choose an image...', type=['jpg', 'jpeg', 'png'])

model_choice = st.selectbox('Select Model:', ('CNN Quantized', 'Transfer Learning Quantized'))

if model_choice == 'CNN Quantized':
    model_path = 'CNN_yoga_model_quantized.tflite'
    model_type = 'CNN'
else:
    model_path = 'transfer_yoga_model_quantized.tflite'
    model_type = 'Transfer'

if uploaded_file is not None:
    img = Image.open(uploaded_file)

    if img.mode != 'RGB':
      img = img.convert('RGB')

    st.image(img, caption='Uploaded Image', width=300)

    # Load selected TFlite model

    if st.button('Predict'):
        with st.spinner('Classifying...'):
            interpreter = load_model(model_path)
            img = preprocess_image(img, model_type)
            preds = predict(interpreter, img)
            predicted_label = class_names[np.argmax(preds)]
            confidence = np.max(preds)

            st.success(f'Prediction: **{predicted_label}** with confidence **{confidence:.2f}**')